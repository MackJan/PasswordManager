name: Build and Deploy Django App

on:
  push:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/django-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      django-image: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for Django app
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Django image
      uses: docker/build-push-action@v5
      with:
        context: ./password_manager
        file: ./password_manager/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd /home/${{ secrets.USERNAME }}/password-manager/
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Extract the latest tag from the build outputs
          DJANGO_IMAGE=$(echo '${{ needs.build-and-push.outputs.django-image }}' | grep ':latest' || echo '${{ needs.build-and-push.outputs.django-image }}' | head -n1)
          
          echo "Django image: $DJANGO_IMAGE"
          
          # Create .env file with all required environment variables
          cat > .env << EOF
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=0
          DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}
          DATABASE=postgres
          SQL_ENGINE=django.db.backends.postgresql
          SQL_DATABASE=${{ secrets.SQL_DATABASE }}
          SQL_USER=${{ secrets.SQL_USER }}
          SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}
          SQL_HOST=db
          SQL_PORT=5432
          POSTGRES_USER=${{ secrets.SQL_USER }}
          POSTGRES_PASSWORD=${{ secrets.SQL_PASSWORD }}
          POSTGRES_DB=${{ secrets.SQL_DATABASE }}
          DJANGO_IMAGE=$DJANGO_IMAGE
          CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}
          GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
          LOKI_API_KEY=${{ secrets.LOKI_API_KEY }}
          EOF
          
          # Pull the latest image explicitly
          docker pull $DJANGO_IMAGE
          
          # Create logs directory
          mkdir -p logs
                  
          # Stop and remove old containers if they exist
          docker compose -f docker-compose.prod.yml stop web || true
          
          # Remove old images to free up space
          docker image prune -f
          
          # Wait a moment for cleanup to complete
          sleep 5
          
          # Start everything
          docker compose -f docker-compose.prod.yml up -d web
          
          # Show running containers for verification
          docker compose -f docker-compose.prod.yml ps
          
          # Show logs to verify startup
          docker compose -f docker-compose.prod.yml logs --tail=20 web
          
          echo "Deployment completed successfully!"
